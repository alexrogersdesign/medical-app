{"version":3,"sources":["types.ts","constants.ts","state/state.tsx","AddPatientModal/FormField.tsx","components/HealthRatingBar.tsx","components/FormDatePicker.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HomeHeader.tsx","PatientListPage/index.tsx","components/EntryDetails.tsx","AddEntryModal/FormField.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","components/PatientHeader.tsx","PatientDetailsPage/index.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["Gender","EntryType","HealthCheckRating","HealthCheckRatingText","apiBaseUrl","initialState","patients","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","TextField","field","placeholder","style","color","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","disabled","form","props","Rating","icon","maxRating","setFieldValue","onRate","_","FormDatePicker","selectedDate","isValid","Date","date","convertedDate","isNaN","getTime","isValidDate","selected","dateFormat","onChange","toISOString","split","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","healthRating","validate","values","requiredError","errors","dirty","component","Grid","Column","floated","width","Button","type","onClick","AddPatientModal","modalOpen","onClose","error","Modal","inverted","open","centered","closeIcon","Header","Content","Segment","HomeHeader","textAlign","Icon","circular","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","data","payload","console","response","Table","striped","Row","HeaderCell","Body","Object","patient","Cell","to","id","EntryDetails","entry","diagnosisData","BaseEntry","List","celled","verticalAlign","Item","Label","content","ribbon","description","specialist","diagnosisCodes","code","definition","find","diagnosis","Description","uuid","Container","fluid","size","renderHealthCheck","healthCheckRating","discharge","criteria","employerName","sickLeave","startDate","endDate","Error","SelectEntry","SelectRating","Dropdown","clearable","selection","DiagnosisSelection","diagnoses","setFieldTouched","stateOptions","key","text","multiple","search","_event","entryOptions","Hospital","OccupationalHealthcare","HealthCheck","healthCheckRatingOptions","Healthy","LowRisk","HighRisk","CriticalRisk","baseValues","healthCheckValues","hospitalValues","occupationalHealthcareValues","dateString","exec","dateInMS","slice","dateError","addEntryModal","AddEntryForm","PatientHeader","PatientDetailsPage","useParams","patientDetails","useEffect","getPatientData","submitNewEntry","newEntry","targetId","get","renderEntries","entries","Link","primary","AddEntryModal","renderPatient","App","patientListFromApi","fetchPatientList","getDiagnosisData","Divider","hidden","path","render","container","document","getElementById","ReactDOM","action","reduce","memo","oldEntries","concat"],"mappings":"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","file":"static/js/main.3dbc1666.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = \"male\",\n  Female = \"female\",\n  Other = \"other\"\n}\n\nexport enum EntryType  {\n  Hospital = \"Hospital\",\n  OccupationalHealthcare = \"OccupationalHealthcare\",\n  HealthCheck = \"HealthCheck\"\n}\nexport enum HealthCheckRating {\n  Healthy = 0,\n  LowRisk = 1,\n  HighRisk = 2,\n  CriticalRisk = 3\n}\n// export enum EntryType {\n  //   \"HealthCheck\",\n//   \"Hospital\",\n//   \"OccupationalHealthcare\"\n// }\nexport enum HealthCheckRatingText {\n  \"Healthy\" = 0,\n  \"LowRisk\" = 1,\n  \"HighRisk\" = 2,\n  \"CriticalRisk\" = 3\n}\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth?: string;\n  entries?: Entries;\n  healthRating: HealthCheckRating;\n}\n\nexport interface Diagnosis {\n  code: string,\n  name: string,\n  latin?: string\n}\n\nexport type Entries = Entry[] | [] ;\n\n\nexport interface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\nexport interface SickLeave {\n  startDate: string,\n  endDate: string\n}\nexport interface Discharge {\n  date: string,\n  criteria: string\n}\nexport interface HealthCheckEntry extends BaseEntry {\n  type: EntryType.HealthCheck;\n  healthCheckRating: HealthCheckRating;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: EntryType.Hospital,\n  discharge: Discharge,\n}\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: EntryType.OccupationalHealthcare,\n  employerName: string,\n  sickLeave?: SickLeave\n}\n\n\nexport type Entry =\n| HospitalEntry\n| OccupationalHealthcareEntry\n| HealthCheckEntry;\n\n\n\nexport type NewPatient = Omit<Patient, 'id'>;\nexport type NonSensitivePatient = Omit<Patient, 'ssn'>;\nexport type PublicPatient = Omit<Patient, 'ssn' | 'entries' >;\n\nexport type DistributiveOmit<T, K extends keyof T, Y extends keyof T> = T extends unknown\n  ? Omit<T, K | Y>\n  : never;\n\nexport type NewEntry = DistributiveOmit<Entry, 'id', 'date'>;","export const apiBaseUrl = 'http://localhost:3001/api';\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { Diagnosis, Patient } from \"../types\";\n\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  patients: { [id: string]: Patient },\n  patientDetails?: Patient,\n  diagnosisData?: Diagnosis[]\n};\n\nconst initialState: State = {\n  patients: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const useStateValue = () => useContext(StateContext);\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, Gender } from \"../types\";\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from 'react';\nimport { Form, Rating } from 'semantic-ui-react';\n\ninterface FormValues {\n  name: string,\n  value: number,\n}\n\ninterface IForm {\n  setFieldValue: (name:string, value:number) => void,\n}\n\nexport interface FormikActions<Values> {\n  setFieldValue<Field extends keyof Values>(\n    field: Field,\n    value: Values[Field],\n    shouldValidate?: boolean\n  ): void;\n}\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n  label?: string;\n  disabled?: true;\n  field?: FormValues,\n  form?: IForm,\n  children?: unknown\n};\n\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar: React.FC<BarProps> = ({ \n  rating, \n  showText,\n  disabled,\n  label,\n  field,\n  form,\n  children: _,\n  ...props\n }: BarProps) => {\n  if (disabled) {\n  return <Rating icon=\"heart\" disabled rating={rating} maxRating={4} />;\n  }  \n  else if (field && form) {\n    const { name, value } = field;\n    const { setFieldValue } = form; \n    return (\n      <Form.Field className=\"health-bar\">\n        <label>{label}</label>\n        <Rating \n        rating={value}\n        icon=\"heart\" \n        maxRating={4}\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        onRate={(_: any, { rating }: any) => setFieldValue(name, rating)}\n        {...props}\n        />\n        {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n      </Form.Field>\n    );\n  }\n  return <></>;\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Form } from 'semantic-ui-react';\n\ninterface FormValues {\n    name: string,\n    value: string,\n  }\n  \n  interface IForm {\n    setFieldValue: (name:string, value:string) => void,\n    isValid: boolean,\n  }\n  \n  type IDateProps = {\n    label: string,\n    field: FormValues,\n    form: IForm,\n    children: unknown\n  };\n\n\nconst FormDatePicker: React.FC<IDateProps> = ({\n    label,\n    field,\n    form,\n    children: _,\n    ...props\n}) => {\n\n    const isValidDate = (date:string): boolean => {\n        const convertedDate = new Date(date);\n        return convertedDate instanceof Date && !isNaN(convertedDate.getTime());\n    };\n\n    if (field && form){\n        const { name, value } = field;\n        const { setFieldValue, isValid } = form; \n        let selectedDate = new Date(value);\n        if(!isValidDate(value)){ selectedDate = new Date(); }\n        \n    return (\n        <>\n            <Form.Field > \n                <label>{label}</label>\n                <div>\n                <DatePicker \n                selected={selectedDate}\n                dateFormat=\"MMMM d, yyyy\"\n                className=\"form-control\"\n                onChange={(date:Date) => setFieldValue(name, date.toISOString().split('T')[0])}\n                {...props}\n                />\n                </div>\n            </Form.Field>\n        </>\n    );}\n    else return <></>;\n};\nexport default FormDatePicker;\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport FormDatePicker from \"../components/FormDatePicker\";\n\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: new Date().toISOString().split('T')[0],\n        occupation: \"\",\n        gender: Gender.Other,\n        healthRating: 3,\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        if (!values.healthRating) {\n          errors.healthRating = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date of Birth\"\n              name=\"DateOfBirth\"\n              component={FormDatePicker}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Field\n              maxRating={4}\n              label=\"Health Rating\"\n              name=\"healthRating\"\n              showText={true}\n              component={HealthRatingBar}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal: React.FC<Props> = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal inverted open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Header, Icon } from 'semantic-ui-react';\n\nconst HomeHeader: React.FC = () => (\n  <div>\n    <Header as='h2' icon textAlign='center'>\n      <Icon name='user md' circular />\n      <Header.Content>Patient Health Portal</Header.Content>\n    </Header>\n  </div>\n);\n\nexport default HomeHeader;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Table, Button, Segment, Header, Icon } from \"semantic-ui-react\";\nimport { Link } from\"react-router-dom\";\n\nimport { PatientFormValues } from \"../AddPatientModal/AddPatientForm\";\nimport AddPatientModal from \"../AddPatientModal\";\nimport { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport HealthRatingBar from \"../components/HealthRatingBar\";\nimport HomeHeader from \"../components/HomeHeader\";\n\nimport { useStateValue } from \"../state\";\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch({ type: \"ADD_PATIENT\", payload: newPatient });\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <HomeHeader/>\n      <Segment placeholder>\n      <Segment textAlign=\"center\">\n        <Header as=\"h3\">\n          <Icon name=\"users\"/>\n          <Header.Content>\n            Current Patients\n          </Header.Content>\n        </Header>\n      </Segment>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Name</Table.HeaderCell>\n              <Table.HeaderCell>Gender</Table.HeaderCell>\n              <Table.HeaderCell>Occupation</Table.HeaderCell>\n              <Table.HeaderCell>Health Rating</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {Object.values(patients).map((patient: Patient) => (\n              <Table.Row key={patient.id}>\n                <Table.Cell><Link to={'/patient/'+patient.id}>{patient.name}</Link></Table.Cell>\n                <Table.Cell>{patient.gender}</Table.Cell>\n                <Table.Cell>{patient.occupation}</Table.Cell>\n                <Table.Cell>\n                  <HealthRatingBar disabled={true} showText={false} rating={patient.healthRating} />\n                </Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        <AddPatientModal\n          modalOpen={modalOpen}\n          onSubmit={submitNewPatient}\n          error={error}\n          onClose={closeModal}\n        />\n        <Button onClick={() => openModal()}>Add New Patient</Button>\n      </Segment>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from 'react';\nimport { Entry, Diagnosis, HealthCheckRatingText } from '../types';\nimport { List, Icon, Container, Label, Header} from \"semantic-ui-react\";\nimport { v4 as uuid } from 'uuid';\nimport { useStateValue } from \"../state\";\n\n \nconst EntryDetails: React.FC<{ entry:Entry }> = ({ entry }) => {\n    const [{ diagnosisData }, ] = useStateValue();\n    const renderHealthCheck = (rating:number) => {\n        switch (rating) {\n            case 0: \n                return <Label icon=\"heart\" size='large' ><Icon name=\"heart\" color=\"green\"/> {HealthCheckRatingText[0]} </Label>;\n            case 1: \n                return <Label icon=\"heart\" size='large' ><Icon name=\"heart\" color=\"yellow\"/> {HealthCheckRatingText[1]} </Label>;\n            case 2: \n                return <Label icon=\"heart\" size='large' ><Icon name=\"heart\" color=\"orange\"/>     {HealthCheckRatingText[2]} </Label>;\n            case 3: \n                return <Label icon=\"heart\" size='large' ><Icon name=\"heart\" color=\"red\"/> {HealthCheckRatingText[3]} </Label>;\n        }\n    };\n\n    const BaseEntry: React.FC = () => {\n        return (\n            <div>\n                <List celled verticalAlign='middle'>               \n                    <List.Item >\n                        <List.Header><Label icon=\"info\" color=\"teal\" content=\"Description\" ribbon/></List.Header>{entry.description}\n                    </List.Item>\n                    <List.Item >\n                        <List.Header><Label icon=\"calendar alternate\" color=\"teal\" content=\"Date\" ribbon/></List.Header>{entry.date}\n                    </List.Item>\n                    <List.Item >\n                        <List.Header><Label icon=\"user md\" color=\"teal\" content=\"Specialist\" ribbon/></List.Header>{entry.specialist}\n                    </List.Item>\n                    <List.Item >\n                        <List.Header><Label icon=\"code\" color=\"teal\" content=\"Diagnosis Codes\" ribbon/></List.Header>\n                        <List celled verticalAlign=\"middle\">\n                            {\n                            entry.diagnosisCodes?.map(code => {\n                                if (diagnosisData){\n                                    const definition = Object.values(diagnosisData).find((diagnosis:Diagnosis) => diagnosis.code === code );\n                                    if (definition) {\n                                        return (\n                                            <List.Item key={uuid()}>\n                                                <List.Header className=\"diagnosis-code\"><List.Icon name=\"plus\" />{code}</List.Header>\n                                                <List.Description>{definition.name}</List.Description>\n                                            </List.Item>);\n                                    }                                     \n                                }\n                                return <List.Item key={uuid()}>{code}</List.Item>;\n                            })\n                            }\n                        </List>\n                    </List.Item>  \n                </List>              \n            </div>\n        );\n    }; \n\n    switch(entry.type){\n        case \"HealthCheck\":\n            return(\n                <Container fluid key={uuid()}>\n                    <Header size=\"medium\" icon=\"first aid\" color=\"black\" content=\"Health Check\" />  \n                    <BaseEntry/>\n                    <List>\n                    <List.Item >\n                        <List.Header><Label icon=\"heart outline\" color=\"teal\" content=\"Health Check Rating\" ribbon/></List.Header>{\n                        renderHealthCheck(entry.healthCheckRating)\n                        }\n                    </List.Item>\n                    </List>\n                    <br/>\n                </Container>\n            );\n        case \"Hospital\":\n            return(\n                <Container fluid key={uuid()}>\n                    <Header size=\"medium\" icon=\"hospital\" color=\"black\" content=\"Hospital Visit\" />  \n                    {/* <Icon name=\"hospital\" size='large' /> */}\n                    <BaseEntry/>\n                    <List celled verticalAlign=\"middle\">\n                        <List.Item >\n                            <List.Header><Label icon=\"calendar check\" color=\"teal\" content=\"Discharge Date\" ribbon/></List.Header>{entry.discharge.date}\n                        </List.Item>\n                        <List.Item>\n                          <List.Header><Label icon=\"stethoscope\" color=\"teal\" content=\"Discharge Criteria\" ribbon/></List.Header>{entry.discharge.criteria}\n                        </List.Item>\n                    </List>\n                    <br/>\n                </Container>\n            );\n        case \"OccupationalHealthcare\":\n            return(\n                <Container fluid key={uuid()}>\n                     <Header size=\"medium\" icon=\"clipboard check\" color=\"black\" content=\"Occupational Healthcare\" />  \n                    <BaseEntry/>\n                    <List celled verticalAlign=\"middle\">\n                        <List.Item>\n                            <List.Header><Label icon=\"briefcase\" color=\"teal\" content=\"Employer\" ribbon/></List.Header>{entry.employerName}\n                        </List.Item>\n                        {entry.sickLeave && \n                        <>\n                            <List.Item>\n                                <List.Header><Label icon=\"calendar plus outline\" color=\"teal\" content=\"Sick Leave Start Date\" ribbon/></List.Header>{entry.sickLeave.startDate}\n                            </List.Item>\n                            <List.Item>\n                                <List.Header><Label icon=\"calendar times outline\" color=\"teal\" content=\"Sick Leave End Date\" ribbon/></List.Header>{entry.sickLeave.endDate}\n                            </List.Item>\n                        </>\n                        }\n                    </List>    \n                    <br/>\n                </Container>\n            );\n            default:\n                // return assertNever(entry);\n                throw new Error('invalid entry type');\n              }\n};\n\nexport default EntryDetails;","import React from \"react\";\nimport { ErrorMessage, Field, FieldProps, FormikProps } from \"formik\";\nimport { Dropdown, DropdownProps, Form } from \"semantic-ui-react\";\nimport { Diagnosis, HealthCheckRating, EntryType } from \"../types\";\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import { useField, useFormikContext } from \"formik\";\n// import DatePicker from \"react-datepicker\";\n\n\n\n// structure of a single option\nexport type EntryOption = {\n  value: EntryType;\n  label: string;\n};\n\nexport type HealthCheckRatingOption = {\n  value: HealthCheckRating;\n  text: string;\n};\n\n// props for select field component\ntype SelectEntryProps = {\n  name: string;\n  label: string;\n  options: EntryOption[];\n};\n\nexport const SelectEntry: React.FC<SelectEntryProps> = ({\n  name,\n  label,\n  options\n}: SelectEntryProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ntype SelectRatingProps = {\n    name: string;\n    label: string;\n    options: HealthCheckRatingOption[];\n  };\n\nexport const SelectRating: React.FC<SelectRatingProps> = ({\n  name,\n  label,\n  options\n}: SelectRatingProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Dropdown\n    clearable options={options} selection\n    name={name}\n    className=\"ui dropdown\"\n\n    />\n    {/* <Field as=\"select\" name={name} className=\"ui dropdown\">\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.text || option.value}\n        </option>\n      ))}\n    </Field> */}\n  </Form.Field>\n);\n\n// export const DatePickerField = ({ ...props }) => {\n//   const { setFieldValue } = useFormikContext();\n//   const [field] = useField(props);\n//   return (\n//     <DatePicker\n//       {...field}\n//       {...props}\n//       selected={(field.value && new Date(field.value)) || null}\n//       onChange={val => {\n//         setFieldValue(field.name, val);\n//       }}\n//     />\n//   );\n// };\n\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldValue\"];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>[\"setFieldTouched\"];\n}) => {\n  const field = \"diagnosisCodes\";\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/unbound-method */\nimport React, { useState } from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form, FormikProps, ArrayHelpers  } from \"formik\";\n// import { v4 as uuidv4 } from 'uuid';\nimport { TextField, SelectEntry, SelectRating, EntryOption, HealthCheckRatingOption, DiagnosisSelection } from \"./FormField\";\nimport { EntryType, HealthCheckRating, NewEntry } from \"../types\";\nimport { useStateValue } from \"../state\";\nimport FormDatePicker from \"../components/FormDatePicker\";\n\n\nexport type EntryFormValues = NewEntry;\n\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\n\nconst entryOptions: EntryOption[] = [\n  { value: EntryType.Hospital, label: \"Hospital\" },\n  { value: EntryType.OccupationalHealthcare, label: \"OccupationalHealthcare\" },\n  { value: EntryType.HealthCheck, label: \"HealthCheck\" }\n];\nconst healthCheckRatingOptions: HealthCheckRatingOption[] = [\n  { value: HealthCheckRating.Healthy, text: \"Healthy\" },\n  { value: HealthCheckRating.LowRisk, text: \"Low Risk\" },\n  { value: HealthCheckRating.HighRisk, text: \"High Risk\" },\n  { value: HealthCheckRating.CriticalRisk, text: \"Critical Risk\" },\n];\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<EntryFormValues>;\n  name: string;\n};\n\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel}) => {\n  const [{ diagnosisData: diagnoses }] = useStateValue();\n  if (!diagnoses) throw new Error('diagnoses data does not exist');\n\n\n  const baseValues = {\n    type: EntryType.HealthCheck,\n    specialist: \"\",\n    diagnosisCodes: [''],\n    description: \"\",\n  };\n  const healthCheckValues = {\n    healthCheckRating: HealthCheckRating.Healthy,\n  };\n  const hospitalValues = {\n    discharge: {\n      date: new Date().toISOString().split('T')[0],\n      criteria: ''\n    },\n  };\n  const occupationalHealthcareValues = {\n    employerName: '',\n    sickLeave: {\n      startDate: new Date().toISOString().split('T')[0],\n      endDate: new Date().toISOString().split('T')[0]\n    }\n  };\n  interface errorValues {\n    description?: string,\n    specialist?: string,\n    employerName?: string,\n    discharge?: {\n        date?: string,\n        criteria?: string\n      },\n    sickLeave?: {\n      startDate?: string,\n      endDate?: string\n    }\n  }\n  function isValidDate(dateString:string): boolean {\n    const regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n    // if(!dateString.exec(regEx)) return false;  // Invalid format\n    if(!regEx.exec(dateString)) return false;  // Invalid format\n    const date = new Date(dateString);\n    const dateInMS = date.getTime();\n    if(!dateInMS && dateInMS !== 0) return false; // NaN value, Invalid date\n    return date.toISOString().slice(0,10) === dateString;\n  }\n \n  return (\n    <Formik\n      initialValues={{...baseValues, ...healthCheckValues, ...hospitalValues, ...occupationalHealthcareValues   }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const dateError = \"Date format must match YYYY-MM-DD \";\n        const errors: errorValues = {};\n      \n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        // hospital \n        if (values.type === EntryType.Hospital && !values.discharge.criteria) {\n         if (!errors.discharge){ errors.discharge = {};}\n          errors.discharge.criteria = requiredError;\n        }\n        if (values.type === EntryType.Hospital && !values.discharge.date) {\n         if (!errors.discharge){ errors.discharge = {};}\n          errors.discharge.date = requiredError;\n        }\n        if (values.type === EntryType.Hospital && values.discharge.date && !isValidDate(values.discharge.date)) {\n         if (!errors.discharge){ errors.discharge = {};}\n          errors.discharge.date = dateError;\n        }\n        // occuaption healthcare\n        if (values.type === EntryType.OccupationalHealthcare &&!values.employerName) {         \n          errors.employerName = requiredError;\n        }\n        if (values.type === EntryType.OccupationalHealthcare && !values.sickLeave.startDate) {\n         if (!errors.sickLeave){ errors.sickLeave = {};}\n          errors.sickLeave.startDate = requiredError;\n        }\n        if (values.type === EntryType.OccupationalHealthcare && values.sickLeave.startDate && !isValidDate(values.sickLeave.startDate)) {\n         if (!errors.sickLeave){ errors.sickLeave = {};}\n          errors.sickLeave.startDate = dateError;\n        }\n        if (values.type === EntryType.OccupationalHealthcare && !values.sickLeave.endDate) {\n         if (!errors.sickLeave){ errors.sickLeave = {};}\n          errors.sickLeave.endDate = requiredError;\n        }\n        if (values.type === EntryType.OccupationalHealthcare && values.sickLeave.endDate && !isValidDate(values.sickLeave.endDate)) {\n          if (!errors.sickLeave){ errors.sickLeave = {};}\n          errors.sickLeave.endDate = dateError;\n        }\n        return errors;\n      }}\n    >\n      {(props) => {\n        const { isValid, dirty, setFieldValue, setFieldTouched, values} = props;\n        const { type } = values;\n        return (\n          <Form className=\"form ui\">\n            <SelectEntry\n              label=\"Entry Type\"\n              name=\"type\"\n              options={entryOptions}\n            />\n            <Field\n              label=\"Specialist\"\n              placeholder=\"Specialist\"\n              name=\"specialist\"\n              component={TextField}\n            />\n             <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            />   \n            <Field\n              label=\"Description\"\n              placeholder=\"Description\"\n              name=\"description\"\n              component={TextField}\n            />\n            {\n            type === EntryType.HealthCheck \n            && \n            <SelectRating\n              label=\"Health Check Rating\"\n              name=\"healthCheckRating\"\n              options={healthCheckRatingOptions}\n            />\n            }\n            {type === EntryType.Hospital \n            && \n            <>\n              <Field\n              label=\"Discharge Criteria\"\n              placeholder=\"Discharge Criteria\"\n              name=\"discharge.criteria\"\n              component={TextField}\n              />\n              <Field\n              label=\"Discharge Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"discharge.date\"\n              component={FormDatePicker}\n              />\n            </>\n            }\n            {\n              type === EntryType.OccupationalHealthcare\n              &&\n              <>\n                <Field\n                label=\"Employer Name\"\n                placeholder=\"Employer\"\n                name=\"employerName\"\n                component={TextField}\n                />       \n                <Field\n                  label=\"Sick Leave Start Date\"\n                  name=\"sickLeave.startDate\"\n                  component={FormDatePicker}\n                />\n                <Field\n                  label=\"Sick Leave End Date\"\n                  name=\"sickLeave.endDate\"\n                  component={FormDatePicker}\n                />\n              </>\n            }\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst addEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default addEntryModal;","import React from 'react';\nimport { Header, Icon } from 'semantic-ui-react';\nimport { Patient } from '../types';\n\ninterface IPatientHeader {\n    patient: Patient\n}\n\nconst PatientHeader: React.FC <IPatientHeader> = ({patient}) => (\n  <div>\n    <Header as='h2' icon textAlign='center'>\n      <Icon name='user' circular />\n      <Header.Content>{patient.name}</Header.Content>\n    </Header>\n  </div>\n);\n\nexport default PatientHeader;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport React, { useEffect } from 'react';\nimport axios from \"axios\";\nimport { Entry, Patient } from '../types';\nimport { v4 as uuid } from 'uuid';\nimport { Link } from\"react-router-dom\";\n\n// import { Patient } from \"../types\";\nimport { apiBaseUrl } from \"../constants\";\nimport { Container, List, Button, Label, Header, Segment } from \"semantic-ui-react\";\nimport { useParams } from 'react-router-dom';\nimport { useStateValue } from \"../state\";\nimport EntryDetails from '../components/EntryDetails';\nimport AddEntryModal from '../AddEntryModal';\nimport { EntryFormValues } from '../AddEntryModal/AddEntryForm';\nimport PatientHeader from '../components/PatientHeader';\n \n\ninterface Params {\n    id: string;\n}\n\nconst PatientDetailsPage: React.FC = () => {\n    const {id} = useParams<Params>();\n    // const [patient, setPatient] = useState<Patient | undefined>();\n    const [{ patientDetails: patient }, dispatch] = useStateValue();\n    const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n    const [error, setError] = React.useState<string | undefined>();\n\n    useEffect(() => {\n        void getPatientData();\n    }, [ dispatch, id]);\n\n    const openModal = (): void => setModalOpen(true);\n    const closeModal = (): void => {\n        setModalOpen(false);\n        setError(undefined);\n      };\n    const submitNewEntry = async (values: EntryFormValues) => {\n    try {\n            const { data: newEntry } = await axios.post<Entry>(\n            `${apiBaseUrl}/patients/${id}/entries`,\n            values\n        );\n            dispatch({ \n             type: \"ADD_ENTRY\",\n             payload: newEntry, \n             targetId: id \n            });\n            closeModal();\n        } catch (e) {\n            // tslint:disable-next-line\n            console.error(e.response.data);\n            // tslint:disable-next-line\n            setError(e.response.data.error);\n        }\n    };\n    const getPatientData = async (): Promise<void> => {\n        try {\n           const { data } = await axios.get<Patient>(\n            `${apiBaseUrl}/patients/${id}`     \n          );\n           if (data) {\n                dispatch({ type: \"SET_PATIENT_DETAILS\", payload: data });\n           } else {return undefined;}          \n        } catch (e) {\n          console.error(e);\n        }\n      };\n    const renderEntries = () => {\n        if (patient && patient.entries ) {\n            const entries: Entry[] = patient.entries;\n            return  Object.values(entries).map((entry: Entry) => {\n                return <EntryDetails key={uuid()} entry={entry} />;\n            });\n        }\n    };\n\n    const renderPatient = ( ) => {\n        if (patient) {\n        return (\n            \n            <Container className=\"Patients\">\n                <PatientHeader patient={patient}/>\n                <Button as={Link} to=\"/\" primary>\n                    Home\n                </Button>\n                <List celled verticalAlign='middle'>\n                    <List.Item>\n                        <List.Header><Label icon=\"id badge outline\" color=\"olive\" content=\"Patient ID\" ribbon/></List.Header>{patient.id}                   \n                        </List.Item>\n                    <List.Item>\n                        <List.Header><Label icon=\"hashtag\" color=\"olive\" content=\"SSN\" ribbon/></List.Header>{patient.ssn}                   \n                        </List.Item>\n                    <List.Item>\n                        <List.Header><Label icon=\"warehouse\" color=\"olive\" content=\"Occupation\" ribbon/></List.Header>{patient.occupation}                   \n                        </List.Item>\n                    <List.Item>\n                        <List.Header><Label icon=\"venus mars\" color=\"olive\" content=\"Gender\" ribbon/></List.Header>{patient.gender}                   \n                        </List.Item>\n                    <List.Item>\n                        <List.Header><Label icon=\"birthday cake\" color=\"olive\" content=\"Date of Birth\" ribbon/></List.Header>{patient.dateOfBirth}                   \n                        </List.Item>\n                </List>           \n                <Container className=\"Entries_Divider\" >\n                    <Header  textAlign='center' floated=\"right\" size=\"large\"  color=\"black\" content=\"Entries\" />                    \n                </Container>\n                <Container>\n                    {patient.entries? renderEntries() : <p>No Entries</p>}    \n                </Container>\n                <AddEntryModal\n                    modalOpen={modalOpen}\n                    onSubmit={submitNewEntry}\n                    error={error}\n                    onClose={closeModal}\n                />\n                <Button onClick={() => openModal()}>Add New Entry</Button>                \n          </Container>\n        );\n      }\n    };\n    return (\n        <div>\n            {patient? renderPatient() : <p>Loading</p>}            \n            {/* { renderPatient() } */}\n        </div>\n    );\n};\nexport default PatientDetailsPage;","/* eslint-disable @typescript-eslint/no-floating-promises */\nimport React from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Divider, Container } from \"semantic-ui-react\";\n\nimport { apiBaseUrl } from \"./constants\";\nimport { useStateValue } from \"./state\";\nimport { Patient, Diagnosis } from \"./types\";\n\nimport PatientListPage from \"./PatientListPage\";\nimport PatientDetailsPage from './PatientDetailsPage';\n\nimport './styles/App.css';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch({ type: \"SET_PATIENT_LIST\", payload: patientListFromApi });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n  }, [dispatch]);\n  \n  React.useEffect(() => {\n    const getDiagnosisData = async (): Promise<void> => {\n      try {\n         const { data } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnosis`     \n        );\n         if (data) {\n              dispatch({ type: \"SET_DIAGNOSIS_DATA\", payload: data });\n         } else {return undefined;}\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    void getDiagnosisData();\n  }, [ ]);\n\n  \n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <Divider hidden />\n          <Switch>\n            <Route path=\"/patient/:id\" render={() => <PatientDetailsPage />} />\n            <Route path=\"/\" render={() => <PatientListPage />} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\n\nconst container = document.getElementById(\"root\");\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  container\n);\n","import { State } from \"./state\";\nimport { Diagnosis, Entry, Patient } from \"../types\";\n\nexport type Action =\n  | {\n      type: \"SET_PATIENT_LIST\";\n      payload: Patient[];\n    }\n  | {\n      type: \"ADD_PATIENT\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_PATIENT_DETAILS\";\n      payload: Patient;\n    }\n  | {\n      type: \"SET_DIAGNOSIS_DATA\";\n      payload: Diagnosis[];\n    }  \n  | {\n      type: \"ADD_ENTRY\";\n      targetId: string\n      payload: Entry;\n    };\n// const checkEntries = (entries: unknown) :entries is Entry[] => {\n//   if (Array.isArray(entries) && entries.every((entry: Entry) => Object.values(EntryType).includes(entry.type) ) ) return true;\n//   else return false;\n// };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_PATIENT_LIST\":\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients\n        }\n      };\n    case \"ADD_PATIENT\":\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload\n        }\n      };\n    case \"SET_PATIENT_DETAILS\":\n      return {\n        ...state,\n        patientDetails: {\n          ...action.payload\n        }\n      };\n      case \"SET_DIAGNOSIS_DATA\":\n      return {\n        ...state,\n        diagnosisData: [\n          ...action.payload\n        ]\n      };\n      case \"ADD_ENTRY\":\n        if(!state.patientDetails){ throw new Error('Patient details not populated');}\n        const oldEntries = state.patientDetails.entries? state.patientDetails.entries: [];\n        \n      return {\n        ...state,\n        patientDetails: {\n          ...state.patientDetails,\n          entries: oldEntries.concat(action.payload)\n        }\n    \n      };\n      // case \"ADD_ENTRY\":\n      //   if (!state.patients[action.targetId]) throw new Error('Patient not found');\n      //   const patientToUpdate = state.patients[action.targetId];\n      //   if (!action.payload) throw new Error('missing payload');\n      //   if (!patientToUpdate.entries) {\n      //     patientToUpdate.entries = [action.payload];\n      //   } else if (!checkEntries(patientToUpdate.entries)) {\n      //      console.log(patientToUpdate);\n      //      throw new Error('malformatted entry');\n      //   } else {\n      //     const entries = patientToUpdate.entries as Entry[];\n      //     patientToUpdate.entries= [\n      //       ...entries,\n      //       action.payload\n      //     ];\n      //   }\n      // return {\n      //   ...state,\n      //   [action.targetId]: patientToUpdate\n      //   // patients: {\n      //   //   ...state.patients,\n      //   //   [action.targetId]: patientToUpdate\n      //   // }\n      // };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}